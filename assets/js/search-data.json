{
  
    
        "post0": {
            "title": "Did you hear the news?",
            "content": "Follow a news topic all over the world in your native language. . We&#39;ll take some keywords, translate them into different language, fetch the news on these keywords and translate the new back. First we make it work, then make it fast using three layers of async programming . author :Hugo Evers | . . . name url description provider market . datePublished . 2021-05-27 13:00:00+00:00 Superrijken maken dankzij privéjet al weer mee... | https://www.volkskrant.nl/nieuws-achtergrond/s... | De markt voor privévluchten in Europa heeft zi... | Volkskrant | nl-NL | . 2021-05-27 09:05:14+00:00 Consumentenbond: Transavia &#39;minst flexibele&#39; v... | https://www.msn.com/nl-nl/news/Binnenland/cons... | Wie voor de zomervakantie een flexibel vliegti... | RTL Nieuws on MSN.com | nl-NL | . 2021-05-24 14:10:00+00:00 KLM stopt met vliegen over Belarus na oproep p... | https://www.volkskrant.nl/nieuws-achtergrond/k... | KLM vliegt voorlopig niet over het luchtruim v... | Volkskrant | nl-NL | . 2021-05-29 05:02:00+00:00 Groningen Airport Eelde kijkt ook naar Brussel... | https://www.dvhn.nl/drenthe/Groningen-Airport-... | Fondsen van de Europese Unie kunnen indirect h... | DVHN | nl-NL | . 2021-05-27 05:45:00+00:00 Ryanair betaalt mensen om in het vliegtuig te ... | https://www.telegraaf.nl/watuzegt/1752348247/r... | Er is veel onbegrip bij het grote publiek over... | De Telegraaf | nl-NL | . 2021-05-25 06:57:00+00:00 KLM blijft over Wit-Rusland vliegen, andere ma... | https://www.rd.nl/artikel/928503-klm-blijft-ov... | Luchtvaartmaatschappij KLM blijft door het Wit... | RD | nl-NL | . 2021-05-24 19:30:00+00:00 KLM stopt toch met vluchten boven Wit-Rusland | https://www.nhnieuws.nl/nieuws/286261/klm-stop... | KLM gaat toch om Wit-Rusland vliegen op routes... | Nieuws | nl-NL | . 2021-05-24 11:07:00+00:00 KLM blijft over Belarus vliegen, andere maatsc... | https://www.parool.nl/wereld/klm-blijft-over-b... | Luchtvaartmaatschappij KLM blijft door het luc... | PAROOL | nl-NL | . import pandas as pd import plotly.graph_objects as go import datetime as dt def news_table(dates:np.array, titles:np.array, summaries:np.array, urls:np.array, autosize=True, width=500, height=550): df = pd.DataFrame([]) df[&#39;Date&#39;] = list(map(lambda date:dt.datetime.fromtimestamp(date.item() / 10**9).strftime(&#39;%d-%b&#39;),dates)) df[&#39;URL&#39;] = list(map(lambda url: f&#39;&lt;a href=&quot;{url}&quot;&gt;Link&lt;/a&gt;&#39;, urls)) df[&#39;Title&#39;] = list(map(lambda url: f&#39;&lt;b&gt;&quot;{url}&quot;&lt;/b&gt; &#39;, titles)) df[&#39;Text&#39;] = &#39;&lt;b&gt;&#39; + df[&#39;Title&#39;] + &#39;&lt;/b&gt; &#39; + summaries + &#39;... &#39; + df[&#39;URL&#39;] values = [df[&#39;Date&#39;], df[&#39;Text&#39;]] text_colors = [&#39;#72bf44&#39;, &#39;#414141&#39;, &#39;#313c59&#39;] fig = go.Figure(data=[go.Table( columnwidth=[1.4, 8], header=dict(values=[[&#39;&#39;], [&#39;&#39;]], fill_color=&#39;rgba(0,0,0,0)&#39;, # align=&#39;left&#39;, font=dict(color=&#39;#414141&#39;, size=12, family=&#39;Verdana&#39;), height=0 ), cells=dict(values=values, fill_color=&#39;rgba(0,0,0,0)&#39;, align=&#39;left&#39;, font=dict(color=text_colors, size=[10, 12], family=&#39;Verdana&#39;), height=40 )) ]) fig.update_layout( title=dict(text=&#39;&lt;b&gt;Latest Aviation news&lt;/b&gt;&#39;, font=dict(color=&#39;#414141&#39;, size=18, family=&#39;Verdana&#39;)), title_x=0.5, autosize=autosize, width=width, height=height, ) return fig.show(config={ &#39;displayModeBar&#39;: False}) . bing news . get the news data as a dataframe . market_keywords_df = pd.DataFrame().from_dict(markets_dict,orient=&#39;index&#39;) market_keywords_df . Country/Region Language iso_alpha keywords . da-DK Denmark | Danish | DNK | Luftfart Flyselskab Fly Lufthavn Plane | . de-AT Austria | German | AUT | Luftfahrt Fluggesellschaft Flüge Flughafen Flu... | . de-CH Switzerland | German | CHE | Luftfahrt Fluggesellschaft Flüge Flughafen Flu... | . de-DE Germany | German | DEU | Luftfahrt Fluggesellschaft Flüge Flughafen Flu... | . en-AU Australia | English | AUS | Aviation Airline Flights Airport Plane | . en-CA Canada | English | CAN | Aviation Airline Flights Airport Plane | . en-GB United Kingdom | English | GBR | Aviation Airline Flights Airport Plane | . en-ID Indonesia | English | IDN | Aviation Airline Flights Airport Plane | . en-IE Ireland | English | IRL | Aviation Airline Flights Airport Plane | . en-IN India | English | IND | Aviation Airline Flights Airport Plane | . en-MY Malaysia | English | MYS | Aviation Airline Flights Airport Plane | . en-NZ New Zealand | English | NZL | Aviation Airline Flights Airport Plane | . en-PH Republic of the Philippines | English | PHL | Aviation Airline Flights Airport Plane | . en-SG Singapore | English | SGP | Aviation Airline Flights Airport Plane | . en-US United States | English | USA | Aviation Airline Flights Airport Plane | . en-ZA South Africa | English | ZAF | Aviation Airline Flights Airport Plane | . es-AR Argentina | Spanish | ARG | Aviación Aerolínea Vuelos Aeropuerto Avión | . es-CL Chile | Spanish | CHL | Aviación Aerolínea Vuelos Aeropuerto Avión | . es-ES Spain | Spanish | ESP | Aviación Aerolínea Vuelos Aeropuerto Avión | . es-MX Mexico | Spanish | MEX | Aviación Aerolínea Vuelos Aeropuerto Avión | . fi-FI Finland | Finnish | FIN | ilmailu lentoyhtiö lennot Lentokenttä kone | . fr-FR France | French | FRA | Aviation Compagnie aérienne Vols Aéroport Avion | . it-IT Italy | Italian | ITA | aviazione linea aerea voli Aeroporto Aereo | . ja-JP Japan | Japanese | JPN | 航空 エアライン フライト 空港 飛行機 | . ko-KR Korea | Korean | KOR | 비행 공기 호스 항공편 공항 비행기 | . nl-BE Belgium | Dutch | BEL | Luchtvaart vliegmaatschappij Vluchten Luchthav... | . nl-NL Netherlands | Dutch | NLD | Luchtvaart vliegmaatschappij Vluchten Luchthav... | . pl-PL Poland | Polish | POL | Lotnictwo Linia lotnicza Loty Lotnisko Samolot | . pt-BR Brazil | Portuguese | BRA | Aviação CIA aérea Voos Aeroporto Avião | . ru-RU Russia | Russian | RUS | авиации авиакомпания рейсы аэропорт Плане | . sv-SE Sweden | Swedish | SWE | Flyg Flygbolag Flyg Flygplats Plan | . tr-TR Turkey | Turkish | TUR | Havacılık Havayolu Uçak Havalimanı uçak | . zh-CN People&#39;s republic of China | Chinese (simplified) | CHN | 航空 航空公司 机票 飞机场 平面 | . zh-HK Hong Kong SAR | Chinese (traditional) | HKG | 航空 航空公司 機票 飛機場 平面 | . zh-TW Taiwan | Chinese (traditional) | TWN | 航空 航空公司 機票 飛機場 平面 | . How to create the queries for the news api? . First follow the documentation over at bing, create an account, activate billing and setup an API key. Then you need to create the query for the API request. Which consist of: . Market codes | Keywords (one string, keywords separated by spaces) | freshness | count | . mkt = &#39;nl-NL&#39; keywords = &#39;Luchtvaart vliegmaatschappij Vluchten Luchthaven Vliegtuig&#39; search_url = &quot;https://api.cognitive.microsoft.com/bing/v7.0/news/search&quot; freshness = &#39;Week&#39; headers = {&quot;Ocp-Apim-Subscription-Key&quot;:os.environ[&#39;BINGS_NEWS_API_KEY&#39;]} params = { &quot;q&quot;: keywords, &#39;freshness&#39;: freshness, &#39;count&#39;: 10, &#39;mkt&#39;: mkt, # &quot;textDecorations&quot;: True, &quot;textFormat&quot;: &quot;RAW&quot; } import requests response = requests.get(search_url, headers=headers, params=params) response.json() . {&#39;_type&#39;: &#39;News&#39;, &#39;queryContext&#39;: {&#39;adultIntent&#39;: False, &#39;originalQuery&#39;: &#39;Luchtvaart vliegmaatschappij Vluchten Luchthaven Vliegtuig&#39;}, &#39;readLink&#39;: &#39;https://api.cognitive.microsoft.com/api/v7/news/search?q=Luchtvaart+vliegmaatschappij+Vluchten+Luchthaven+Vliegtuig&#39;, &#39;sort&#39;: [{&#39;id&#39;: &#39;relevance&#39;, &#39;isSelected&#39;: True, &#39;name&#39;: &#39;Beste overeenkomst&#39;, &#39;url&#39;: &#39;https://api.cognitive.microsoft.com/api/v7/news/search?q=Luchtvaart+vliegmaatschappij+Vluchten+Luchthaven+Vliegtuig&#39;}, {&#39;id&#39;: &#39;date&#39;, &#39;isSelected&#39;: False, &#39;name&#39;: &#39;Meest recent&#39;, &#39;url&#39;: &#39;https://api.cognitive.microsoft.com/api/v7/news/search?q=Luchtvaart+vliegmaatschappij+Vluchten+Luchthaven+Vliegtuig&amp;sortby=date&#39;}], &#39;totalEstimatedMatches&#39;: 8, &#39;value&#39;: [{&#39;about&#39;: [{&#39;name&#39;: &#39;de Volkskrant&#39;, &#39;readLink&#39;: &#39;https://api.cognitive.microsoft.com/api/v7/entities/a3b315b7-0c7d-d2d2-d2e6-c4d0e7964834&#39;}], &#39;category&#39;: &#39;Business&#39;, &#39;datePublished&#39;: &#39;2021-05-27T13:00:00.0000000Z&#39;, &#39;description&#39;: &#39;De markt voor privévluchten in Europa heeft zich sneller hersteld van de coronacrisis dan de ‘gewone’ luchtvaart. Terwijl Jan Modaal zijn&#39;, &#39;image&#39;: {&#39;thumbnail&#39;: {&#39;contentUrl&#39;: &#39;https://www.bing.com/th?id=OVFT.oJy735r2Aafw8ieaksZMGi&amp;pid=News&#39;, &#39;height&#39;: 466, &#39;width&#39;: 700}}, &#39;name&#39;: &#39;Superrijken maken dankzij privéjet al weer meer vluchten dan de sterveling&#39;, &#39;provider&#39;: [{&#39;_type&#39;: &#39;Organization&#39;, &#39;name&#39;: &#39;Volkskrant&#39;}], &#39;url&#39;: &#39;https://www.volkskrant.nl/nieuws-achtergrond/superrijken-maken-dankzij-privejet-al-weer-meer-vluchten-dan-de-sterveling~b40828a1/&#39;}, {&#39;about&#39;: [{&#39;name&#39;: &#39;Consumentenbond&#39;, &#39;readLink&#39;: &#39;https://api.cognitive.microsoft.com/api/v7/entities/fea22130-578e-4ad9-9174-6a90720745fd&#39;}], &#39;category&#39;: &#39;Business&#39;, &#39;datePublished&#39;: &#39;2021-05-27T09:05:14.0000000Z&#39;, &#39;description&#39;: &#39;Wie voor de zomervakantie een flexibel vliegticket wil boeken, kan beter niet bij Transavia aankloppen. In vergelijking met andere Europese luchtvaartmaatschappijen is die een stuk minder soepel als h&#39;, &#39;image&#39;: {&#39;thumbnail&#39;: {&#39;contentUrl&#39;: &#39;https://www.bing.com/th?id=OVFT.OTQ5ataMdKakSebtaH5UXy&amp;pid=News&#39;, &#39;height&#39;: 393, &#39;width&#39;: 700}}, &#39;mentions&#39;: [{&#39;name&#39;: &#39;Consumentenbond&#39;}, {&#39;name&#39;: &#39;Transavia.com&#39;}, {&#39;name&#39;: &#39;RTL Nieuws&#39;}], &#39;name&#39;: &#34;Consumentenbond: Transavia &#39;minst flexibele&#39; vliegmaatschappij&#34;, &#39;provider&#39;: [{&#39;_type&#39;: &#39;Organization&#39;, &#39;name&#39;: &#39;RTL Nieuws on MSN.com&#39;}], &#39;url&#39;: &#39;https://www.msn.com/nl-nl/news/Binnenland/consumentenbond-transavia-minst-flexibele-vliegmaatschappij/ar-AAKqSMa&#39;}, {&#39;about&#39;: [{&#39;name&#39;: &#39;de Volkskrant&#39;, &#39;readLink&#39;: &#39;https://api.cognitive.microsoft.com/api/v7/entities/a3b315b7-0c7d-d2d2-d2e6-c4d0e7964834&#39;}, {&#39;name&#39;: &#39;KLM&#39;, &#39;readLink&#39;: &#39;https://api.cognitive.microsoft.com/api/v7/entities/500f9f4f-16e3-a317-4cec-21fc8c627782&#39;}, {&#39;name&#39;: &#39;Belarus&#39;, &#39;readLink&#39;: &#39;https://api.cognitive.microsoft.com/api/v7/entities/70f0e4f4-4cfb-8ee3-cfe6-041ba6b221bc&#39;}], &#39;datePublished&#39;: &#39;2021-05-24T14:10:00.0000000Z&#39;, &#39;description&#39;: &#39;KLM vliegt voorlopig niet over het luchtruim van Belarus. Eerder op maandag riep premier Rutte de luchtvaartmaatschappij op het luchtruim te&#39;, &#39;image&#39;: {&#39;thumbnail&#39;: {&#39;contentUrl&#39;: &#39;https://www.bing.com/th?id=OVFT.LwWrklLNGJl5oDHV9C4CmC&amp;pid=News&#39;, &#39;height&#39;: 469, &#39;width&#39;: 700}}, &#39;name&#39;: &#39;KLM stopt met vliegen over Belarus na oproep premier Rutte&#39;, &#39;provider&#39;: [{&#39;_type&#39;: &#39;Organization&#39;, &#39;name&#39;: &#39;Volkskrant&#39;}], &#39;url&#39;: &#39;https://www.volkskrant.nl/nieuws-achtergrond/klm-stopt-met-vliegen-over-belarus-na-oproep-premier-rutte~b66d8a01/&#39;}, {&#39;datePublished&#39;: &#39;2021-05-29T05:02:00.0000000Z&#39;, &#39;description&#39;: &#39;Fondsen van de Europese Unie kunnen indirect helpen bij het overleven van Groningen Airport Eelde (GAE). De luchthaven heeft dan ook de blik op Brussel gericht.&#39;, &#39;image&#39;: {&#39;thumbnail&#39;: {&#39;contentUrl&#39;: &#39;https://www.bing.com/th?id=OVFT.ilHo9N2ArAu9IBZzxo4fiy&amp;pid=News&#39;, &#39;height&#39;: 436, &#39;width&#39;: 700}}, &#39;name&#39;: &#39;Groningen Airport Eelde kijkt ook naar Brussel voor overlevingskansen. Fondsen van Europese Unie kunnen indirect helpen&#39;, &#39;provider&#39;: [{&#39;_type&#39;: &#39;Organization&#39;, &#39;name&#39;: &#39;DVHN&#39;}], &#39;url&#39;: &#39;https://www.dvhn.nl/drenthe/Groningen-Airport-Eelde-kijkt-ook-naar-Brussel-voor-overlevingskansen-26854246.html&#39;}, {&#39;about&#39;: [{&#39;name&#39;: &#39;De Telegraaf&#39;, &#39;readLink&#39;: &#39;https://api.cognitive.microsoft.com/api/v7/entities/9d35a5f9-d594-d398-1e17-b30ade9d7385&#39;}, {&#39;name&#39;: &#39;Ryanair&#39;, &#39;readLink&#39;: &#39;https://api.cognitive.microsoft.com/api/v7/entities/416c0ed4-d041-d9d6-4ddb-0d5c65f5be34&#39;}], &#39;datePublished&#39;: &#39;2021-05-27T05:45:00.0000000Z&#39;, &#39;description&#39;: &#39;Er is veel onbegrip bij het grote publiek over de luchtvaart, zo blijkt deze dagen weer. Lezers meldden mij verontwaardigd dat de KLM na de kaping van een toestel van Ryanair boven Wit-Rusland bleef v&#39;, &#39;image&#39;: {&#39;thumbnail&#39;: {&#39;contentUrl&#39;: &#39;https://www.bing.com/th?id=OVFT.b9W7s5HCwbJxAQWXNLl3bi&amp;pid=News&#39;, &#39;height&#39;: 367, &#39;width&#39;: 700}}, &#39;name&#39;: &#39;Ryanair betaalt mensen om in het vliegtuig te stappen is pure marketingstunt&#39;, &#39;provider&#39;: [{&#39;_type&#39;: &#39;Organization&#39;, &#39;name&#39;: &#39;De Telegraaf&#39;}], &#39;url&#39;: &#39;https://www.telegraaf.nl/watuzegt/1752348247/ryanair-betaalt-mensen-om-in-het-vliegtuig-te-stappen-is-pure-marketingstunt&#39;}, {&#39;about&#39;: [{&#39;name&#39;: &#39;KLM&#39;, &#39;readLink&#39;: &#39;https://api.cognitive.microsoft.com/api/v7/entities/500f9f4f-16e3-a317-4cec-21fc8c627782&#39;}, {&#39;name&#39;: &#39;Rusland, Cumbria&#39;, &#39;readLink&#39;: &#39;https://api.cognitive.microsoft.com/api/v7/entities/54cf54dd-77eb-3e02-afb1-7edb875e5941&#39;}], &#39;datePublished&#39;: &#39;2021-05-25T06:57:00.0000000Z&#39;, &#39;description&#39;: &#39;Luchtvaartmaatschappij KLM blijft door het Wit-Russische luchtruim vliegen. De maatschappij zegt geen veiligheidsrisico te zien en stelt dat het vluchtschema „normaal zal worden voortgezet”. KLM heeft&#39;, &#39;image&#39;: {&#39;thumbnail&#39;: {&#39;contentUrl&#39;: &#39;https://www.bing.com/th?id=OVFT.lpwGdQd6RSUjqsK_Q3ebPi&amp;pid=News&#39;, &#39;height&#39;: 437, &#39;width&#39;: 700}}, &#39;name&#39;: &#39;KLM blijft over Wit-Rusland vliegen, andere maatschappijen niet&#39;, &#39;provider&#39;: [{&#39;_type&#39;: &#39;Organization&#39;, &#39;name&#39;: &#39;RD&#39;}], &#39;url&#39;: &#39;https://www.rd.nl/artikel/928503-klm-blijft-over-wit-rusland-vliegen&#39;}, {&#39;about&#39;: [{&#39;name&#39;: &#39;Rusland, Cumbria&#39;, &#39;readLink&#39;: &#39;https://api.cognitive.microsoft.com/api/v7/entities/54cf54dd-77eb-3e02-afb1-7edb875e5941&#39;}, {&#39;name&#39;: &#39;New Hampshire&#39;, &#39;readLink&#39;: &#39;https://api.cognitive.microsoft.com/api/v7/entities/9ca71997-cc97-46eb-8911-fac32f80b0b1&#39;}, {&#39;name&#39;: &#39;KLM&#39;, &#39;readLink&#39;: &#39;https://api.cognitive.microsoft.com/api/v7/entities/500f9f4f-16e3-a317-4cec-21fc8c627782&#39;}], &#39;datePublished&#39;: &#39;2021-05-24T19:30:00.0000000Z&#39;, &#39;description&#39;: &#39;KLM gaat toch om Wit-Rusland vliegen op routes van en naar Azië. Dat laat de maatschappij weten nadat demissionair premier Rutte KLM opriep om het Wit-Russische luchtruim te vermijden. Aanleiding is d&#39;, &#39;image&#39;: {&#39;thumbnail&#39;: {&#39;contentUrl&#39;: &#39;https://www.bing.com/th?id=OVFT.3o1T08dkW4JbTPzPE7GjnC&amp;pid=News&#39;, &#39;height&#39;: 394, &#39;width&#39;: 700}}, &#39;name&#39;: &#39;KLM stopt toch met vluchten boven Wit-Rusland&#39;, &#39;provider&#39;: [{&#39;_type&#39;: &#39;Organization&#39;, &#39;name&#39;: &#39;Nieuws&#39;}], &#39;url&#39;: &#39;https://www.nhnieuws.nl/nieuws/286261/klm-stopt-toch-met-vluchten-boven-wit-rusland&#39;}, {&#39;about&#39;: [{&#39;name&#39;: &#39;Belarus&#39;, &#39;readLink&#39;: &#39;https://api.cognitive.microsoft.com/api/v7/entities/70f0e4f4-4cfb-8ee3-cfe6-041ba6b221bc&#39;}, {&#39;name&#39;: &#39;KLM&#39;, &#39;readLink&#39;: &#39;https://api.cognitive.microsoft.com/api/v7/entities/500f9f4f-16e3-a317-4cec-21fc8c627782&#39;}, {&#39;name&#39;: &#39;Het Parool&#39;, &#39;readLink&#39;: &#39;https://api.cognitive.microsoft.com/api/v7/entities/914c006b-8523-333d-5ffc-2a81413ff871&#39;}], &#39;datePublished&#39;: &#39;2021-05-24T11:07:00.0000000Z&#39;, &#39;description&#39;: &#39;Luchtvaartmaatschappij KLM blijft door het luchtruim boven Belarus vliegen. Verschillende andere maatschappijen mijden het land voorlopig vanwege&#39;, &#39;image&#39;: {&#39;thumbnail&#39;: {&#39;contentUrl&#39;: &#39;https://www.bing.com/th?id=OVFT.rgCSEJM00FvWDGpT3PUFBS&amp;pid=News&#39;, &#39;height&#39;: 466, &#39;width&#39;: 700}}, &#39;name&#39;: &#39;KLM blijft over Belarus vliegen, andere maatschappijen niet&#39;, &#39;provider&#39;: [{&#39;_type&#39;: &#39;Organization&#39;, &#39;name&#39;: &#39;PAROOL&#39;}], &#39;url&#39;: &#39;https://www.parool.nl/wereld/klm-blijft-over-belarus-vliegen-andere-maatschappijen-niet~b9bc387b/&#39;}]} . Our list of keywords to search for: . keywords = [&#39;Aviation&#39;, &#39;Airline&#39;, &#39;Flights&#39;, &#39;Airport&#39;, &#39;Planes&#39;] . You will also need to determine in which markets you want to fetch the news, since we want a very international perspective and get the aviation news from every country we ask for every news country. So we need a list of markets to search in. . market_codes = [&#39;da-DK&#39;, &#39;de-AT&#39;, &#39;de-CH&#39;, &#39;de-DE&#39;, &#39;en-AU&#39;, &#39;en-CA&#39;, &#39;en-GB&#39;, &#39;en-ID&#39;, &#39;en-IE&#39;, &#39;en-IN&#39;, &#39;en-MY&#39;, &#39;en-NZ&#39;, &#39;en-PH&#39;, &#39;en-SG&#39;, &#39;en-US&#39;, &#39;en-ZA&#39;, &#39;es-AR&#39;, &#39;es-CL&#39;, &#39;es-ES&#39;, &#39;es-MX&#39;, &#39;fi-FI&#39;, &#39;fr-FR&#39;, &#39;it-IT&#39;, &#39;ja-JP&#39;, &#39;ko-KR&#39;, &#39;nl-BE&#39;, &#39;nl-NL&#39;, &#39;pl-PL&#39;, &#39;pt-BR&#39;, &#39;ru-RU&#39;, &#39;sv-SE&#39;, &#39;tr-TR&#39;, &#39;zh-CN&#39;, &#39;zh-HK&#39;, &#39;zh-TW&#39;] . You can copy and paste the table with all the markets, but you can also remember that pandas has a very neat table scraping function, so with a little pd.read_html and filters these afterwards. . import pandas as pd markets_df = pd.read_html(&#39;https://docs.microsoft.com/en-us/rest/api/cognitiveservices-bingsearch/bing-news-api-v7-reference#market-codes&#39;)[23] markets_df . Country/Region Language Market Code . 0 Denmark | Danish | da-DK | . 1 Austria | German | de-AT | . 2 Belgium | Dutch | nl-BE | . 3 Switzerland | German | de-CH | . 4 Germany | German | de-DE | . 5 Australia | English | en-AU | . 6 Canada | English | en-CA | . 7 United Kingdom | English | en-GB | . 8 Indonesia | English | en-ID | . 9 Ireland | English | en-IE | . 10 India | English | en-IN | . 11 Malaysia | English | en-MY | . 12 New Zealand | English | en-NZ | . 13 Republic of the Philippines | English | en-PH | . 14 Singapore | English | en-SG | . 15 United States | English | en-US | . 16 English | general | en-WW | . 17 English | general | en-XA | . 18 South Africa | English | en-ZA | . 19 Argentina | Spanish | es-AR | . 20 Chile | Spanish | es-CL | . 21 Spain | Spanish | es-ES | . 22 Mexico | Spanish | es-MX | . 23 United States | Spanish | es-US | . 24 Spanish | general | es-XL | . 25 Finland | Finnish | fi-FI | . 26 France | French | fr-BE | . 27 Canada | French | fr-CA | . 28 Switzerland | French | fr-CH | . 29 France | French | fr-FR | . 30 Italy | Italian | it-IT | . 31 Hong Kong SAR | Traditional Chinese | zh-HK | . 32 Taiwan | Traditional Chinese | zh-TW | . 33 Japan | Japanese | ja-JP | . 34 Korea | Korean | ko-KR | . 35 Netherlands | Dutch | nl-NL | . 36 People&#39;s republic of China | Chinese | zh-CN | . 37 Poland | Polish | pl-PL | . 38 Brazil | Portuguese | pt-BR | . 39 Russia | Russian | ru-RU | . 40 Sweden | Swedish | sv-SE | . 41 Turkey | Turkish | tr-TR | . market_keywords_df.index.to_list() . [&#39;da-DK&#39;, &#39;de-AT&#39;, &#39;de-CH&#39;, &#39;de-DE&#39;, &#39;en-AU&#39;, &#39;en-CA&#39;, &#39;en-GB&#39;, &#39;en-ID&#39;, &#39;en-IE&#39;, &#39;en-IN&#39;, &#39;en-MY&#39;, &#39;en-NZ&#39;, &#39;en-PH&#39;, &#39;en-SG&#39;, &#39;en-US&#39;, &#39;en-ZA&#39;, &#39;es-AR&#39;, &#39;es-CL&#39;, &#39;es-ES&#39;, &#39;es-MX&#39;, &#39;fi-FI&#39;, &#39;fr-FR&#39;, &#39;it-IT&#39;, &#39;ja-JP&#39;, &#39;ko-KR&#39;, &#39;nl-BE&#39;, &#39;nl-NL&#39;, &#39;pl-PL&#39;, &#39;pt-BR&#39;, &#39;ru-RU&#39;, &#39;sv-SE&#39;, &#39;tr-TR&#39;, &#39;zh-CN&#39;, &#39;zh-HK&#39;, &#39;zh-TW&#39;] . import pycountry from google_trans_new import google_translator def generate_market_keywords(keywords:list,market_codes:list)-&gt;dict: &quot;&quot;&quot; Parameters - keywords : list list of keywords to be translated in the target language (as provided in the market-codes) market_codes : list list of market_codes, formatted as language_iso_alpha_2-COUNTRY_ISO_ALPHA_2 , e.g &#39;da-DK&#39; Returns - market_codes_country_language_alpha3_keywords : dict { &#39;da-DK&#39;: { &#39;Country/Region&#39;: &#39;Denmark&#39;, &#39;Language&#39;: &#39;Danish&#39;, &#39;iso_alpha&#39;: &#39;DNK&#39;, &#39;keywords&#39;: &#39;Luftfart Flyselskab Fly Lufthavn Planer&#39;, &#39;language_iso_alpha_2&#39;: &#39;da&#39; }, &#39;de-AT&#39;: { &#39;Country/Region&#39;: &#39;Austria&#39;, &#39;Language&#39;: &#39;German&#39;, &#39;iso_alpha&#39;: &#39;AUT&#39;, &#39;keywords&#39;: &#39;Luftfahrt Fluggesellschaft Flüge Flughafen Flugzeug&#39;, &#39;language_iso_alpha_2&#39;: &#39;de&#39; } } &quot;&quot;&quot; translate_keywords = lambda keywords, language_iso_alpha_2: [ google_translator().translate( keyword, lang_tgt=language_iso_alpha_2, lang_src = &#39;en&#39; ) for keyword in keywords ] # generate the set of languages in the target markets target_languages = set([get_country_language_iso_alpha(market_code)[&#39;language_iso_alpha_2&#39;] for market_code in market_codes]) # generate the dictionary with language as the key and translates keywords as values keywords_translated = {language : &quot; &quot;.join(translate_keywords(keywords,language)) for language in target_languages} return {market_code:{**get_country_language_iso_alpha(market_code), **{&quot;keywords&quot;:keywords_translated[get_country_language_iso_alpha(market_code)[&#39;language_iso_alpha_2&#39;]]} } for market_code in market_codes} generate_market_keywords(keywords,market_codes) . /usr/local/lib/python3.7/dist-packages/pkg_resources/_vendor/pyparsing.py:3552: RuntimeWarning: coroutine &#39;async_series_translator&#39; was never awaited ret = e._parse( instring, loc, doActions ) RuntimeWarning: Enable tracemalloc to get the object allocation traceback . NameError Traceback (most recent call last) &lt;ipython-input-53-f5dab7e639fe&gt; in &lt;module&gt;() 90 } for market_code in market_codes} 91 &gt; 92 generate_market_keywords(keywords,market_codes) &lt;ipython-input-53-f5dab7e639fe&gt; in generate_market_keywords(keywords, market_codes) 82 ] 83 # generate the set of languages in the target markets &gt; 84 target_languages = set([get_country_language_iso_alpha(market_code)[&#39;language_iso_alpha_2&#39;] for market_code in market_codes]) 85 # generate the dictionary with language as the key and translates keywords as values 86 keywords_translated = {language : &#34; &#34;.join(translate_keywords(keywords,language)) for language in target_languages} &lt;ipython-input-53-f5dab7e639fe&gt; in &lt;listcomp&gt;(.0) 82 ] 83 # generate the set of languages in the target markets &gt; 84 target_languages = set([get_country_language_iso_alpha(market_code)[&#39;language_iso_alpha_2&#39;] for market_code in market_codes]) 85 # generate the dictionary with language as the key and translates keywords as values 86 keywords_translated = {language : &#34; &#34;.join(translate_keywords(keywords,language)) for language in target_languages} NameError: name &#39;get_country_language_iso_alpha&#39; is not defined . markets_dict = {&#39;da-DK&#39;: {&#39;Country/Region&#39;: &#39;Denmark&#39;, &#39;Language&#39;: &#39;Danish&#39;, &#39;iso_alpha&#39;: &#39;DNK&#39;, &#39;keywords&#39;: &#39;Luftfart Flyselskab Fly Lufthavn Plane&#39;}, &#39;de-AT&#39;: {&#39;Country/Region&#39;: &#39;Austria&#39;, &#39;Language&#39;: &#39;German&#39;, &#39;iso_alpha&#39;: &#39;AUT&#39;, &#39;keywords&#39;: &#39;Luftfahrt Fluggesellschaft Flüge Flughafen Flugzeug&#39;}, &#39;de-CH&#39;: {&#39;Country/Region&#39;: &#39;Switzerland&#39;, &#39;Language&#39;: &#39;German&#39;, &#39;iso_alpha&#39;: &#39;CHE&#39;, &#39;keywords&#39;: &#39;Luftfahrt Fluggesellschaft Flüge Flughafen Flugzeug&#39;}, &#39;de-DE&#39;: {&#39;Country/Region&#39;: &#39;Germany&#39;, &#39;Language&#39;: &#39;German&#39;, &#39;iso_alpha&#39;: &#39;DEU&#39;, &#39;keywords&#39;: &#39;Luftfahrt Fluggesellschaft Flüge Flughafen Flugzeug&#39;}, &#39;en-AU&#39;: {&#39;Country/Region&#39;: &#39;Australia&#39;, &#39;Language&#39;: &#39;English&#39;, &#39;iso_alpha&#39;: &#39;AUS&#39;, &#39;keywords&#39;: &#39;Aviation Airline Flights Airport Plane&#39;}, &#39;en-CA&#39;: {&#39;Country/Region&#39;: &#39;Canada&#39;, &#39;Language&#39;: &#39;English&#39;, &#39;iso_alpha&#39;: &#39;CAN&#39;, &#39;keywords&#39;: &#39;Aviation Airline Flights Airport Plane&#39;}, &#39;en-GB&#39;: {&#39;Country/Region&#39;: &#39;United Kingdom&#39;, &#39;Language&#39;: &#39;English&#39;, &#39;iso_alpha&#39;: &#39;GBR&#39;, &#39;keywords&#39;: &#39;Aviation Airline Flights Airport Plane&#39;}, &#39;en-ID&#39;: {&#39;Country/Region&#39;: &#39;Indonesia&#39;, &#39;Language&#39;: &#39;English&#39;, &#39;iso_alpha&#39;: &#39;IDN&#39;, &#39;keywords&#39;: &#39;Aviation Airline Flights Airport Plane&#39;}, &#39;en-IE&#39;: {&#39;Country/Region&#39;: &#39;Ireland&#39;, &#39;Language&#39;: &#39;English&#39;, &#39;iso_alpha&#39;: &#39;IRL&#39;, &#39;keywords&#39;: &#39;Aviation Airline Flights Airport Plane&#39;}, &#39;en-IN&#39;: {&#39;Country/Region&#39;: &#39;India&#39;, &#39;Language&#39;: &#39;English&#39;, &#39;iso_alpha&#39;: &#39;IND&#39;, &#39;keywords&#39;: &#39;Aviation Airline Flights Airport Plane&#39;}, &#39;en-MY&#39;: {&#39;Country/Region&#39;: &#39;Malaysia&#39;, &#39;Language&#39;: &#39;English&#39;, &#39;iso_alpha&#39;: &#39;MYS&#39;, &#39;keywords&#39;: &#39;Aviation Airline Flights Airport Plane&#39;}, &#39;en-NZ&#39;: {&#39;Country/Region&#39;: &#39;New Zealand&#39;, &#39;Language&#39;: &#39;English&#39;, &#39;iso_alpha&#39;: &#39;NZL&#39;, &#39;keywords&#39;: &#39;Aviation Airline Flights Airport Plane&#39;}, &#39;en-PH&#39;: {&#39;Country/Region&#39;: &#39;Republic of the Philippines&#39;, &#39;Language&#39;: &#39;English&#39;, &#39;iso_alpha&#39;: &#39;PHL&#39;, &#39;keywords&#39;: &#39;Aviation Airline Flights Airport Plane&#39;}, &#39;en-SG&#39;: {&#39;Country/Region&#39;: &#39;Singapore&#39;, &#39;Language&#39;: &#39;English&#39;, &#39;iso_alpha&#39;: &#39;SGP&#39;, &#39;keywords&#39;: &#39;Aviation Airline Flights Airport Plane&#39;}, &#39;en-US&#39;: {&#39;Country/Region&#39;: &#39;United States&#39;, &#39;Language&#39;: &#39;English&#39;, &#39;iso_alpha&#39;: &#39;USA&#39;, &#39;keywords&#39;: &#39;Aviation Airline Flights Airport Plane&#39;}, &#39;en-ZA&#39;: {&#39;Country/Region&#39;: &#39;South Africa&#39;, &#39;Language&#39;: &#39;English&#39;, &#39;iso_alpha&#39;: &#39;ZAF&#39;, &#39;keywords&#39;: &#39;Aviation Airline Flights Airport Plane&#39;}, &#39;es-AR&#39;: {&#39;Country/Region&#39;: &#39;Argentina&#39;, &#39;Language&#39;: &#39;Spanish&#39;, &#39;iso_alpha&#39;: &#39;ARG&#39;, &#39;keywords&#39;: &#39;Aviación Aerolínea Vuelos Aeropuerto Avión&#39;}, &#39;es-CL&#39;: {&#39;Country/Region&#39;: &#39;Chile&#39;, &#39;Language&#39;: &#39;Spanish&#39;, &#39;iso_alpha&#39;: &#39;CHL&#39;, &#39;keywords&#39;: &#39;Aviación Aerolínea Vuelos Aeropuerto Avión&#39;}, &#39;es-ES&#39;: {&#39;Country/Region&#39;: &#39;Spain&#39;, &#39;Language&#39;: &#39;Spanish&#39;, &#39;iso_alpha&#39;: &#39;ESP&#39;, &#39;keywords&#39;: &#39;Aviación Aerolínea Vuelos Aeropuerto Avión&#39;}, &#39;es-MX&#39;: {&#39;Country/Region&#39;: &#39;Mexico&#39;, &#39;Language&#39;: &#39;Spanish&#39;, &#39;iso_alpha&#39;: &#39;MEX&#39;, &#39;keywords&#39;: &#39;Aviación Aerolínea Vuelos Aeropuerto Avión&#39;}, &#39;fi-FI&#39;: {&#39;Country/Region&#39;: &#39;Finland&#39;, &#39;Language&#39;: &#39;Finnish&#39;, &#39;iso_alpha&#39;: &#39;FIN&#39;, &#39;keywords&#39;: &#39;ilmailu lentoyhtiö lennot Lentokenttä kone&#39;}, &#39;fr-FR&#39;: {&#39;Country/Region&#39;: &#39;France&#39;, &#39;Language&#39;: &#39;French&#39;, &#39;iso_alpha&#39;: &#39;FRA&#39;, &#39;keywords&#39;: &#39;Aviation Compagnie aérienne Vols Aéroport Avion&#39;}, &#39;it-IT&#39;: {&#39;Country/Region&#39;: &#39;Italy&#39;, &#39;Language&#39;: &#39;Italian&#39;, &#39;iso_alpha&#39;: &#39;ITA&#39;, &#39;keywords&#39;: &#39;aviazione linea aerea voli Aeroporto Aereo&#39;}, &#39;ja-JP&#39;: {&#39;Country/Region&#39;: &#39;Japan&#39;, &#39;Language&#39;: &#39;Japanese&#39;, &#39;iso_alpha&#39;: &#39;JPN&#39;, &#39;keywords&#39;: &#39;航空 エアライン フライト 空港 飛行機&#39;}, &#39;ko-KR&#39;: {&#39;Country/Region&#39;: &#39;Korea&#39;, &#39;Language&#39;: &#39;Korean&#39;, &#39;iso_alpha&#39;: &#39;KOR&#39;, &#39;keywords&#39;: &#39;비행 공기 호스 항공편 공항 비행기&#39;}, &#39;nl-BE&#39;: {&#39;Country/Region&#39;: &#39;Belgium&#39;, &#39;Language&#39;: &#39;Dutch&#39;, &#39;iso_alpha&#39;: &#39;BEL&#39;, &#39;keywords&#39;: &#39;Luchtvaart vliegmaatschappij Vluchten Luchthaven Vliegtuig&#39;}, &#39;nl-NL&#39;: {&#39;Country/Region&#39;: &#39;Netherlands&#39;, &#39;Language&#39;: &#39;Dutch&#39;, &#39;iso_alpha&#39;: &#39;NLD&#39;, &#39;keywords&#39;: &#39;Luchtvaart vliegmaatschappij Vluchten Luchthaven Vliegtuig&#39;}, &#39;pl-PL&#39;: {&#39;Country/Region&#39;: &#39;Poland&#39;, &#39;Language&#39;: &#39;Polish&#39;, &#39;iso_alpha&#39;: &#39;POL&#39;, &#39;keywords&#39;: &#39;Lotnictwo Linia lotnicza Loty Lotnisko Samolot&#39;}, &#39;pt-BR&#39;: {&#39;Country/Region&#39;: &#39;Brazil&#39;, &#39;Language&#39;: &#39;Portuguese&#39;, &#39;iso_alpha&#39;: &#39;BRA&#39;, &#39;keywords&#39;: &#39;Aviação CIA aérea Voos Aeroporto Avião&#39;}, &#39;ru-RU&#39;: {&#39;Country/Region&#39;: &#39;Russia&#39;, &#39;Language&#39;: &#39;Russian&#39;, &#39;iso_alpha&#39;: &#39;RUS&#39;, &#39;keywords&#39;: &#39;авиации авиакомпания рейсы аэропорт Плане&#39;}, &#39;sv-SE&#39;: {&#39;Country/Region&#39;: &#39;Sweden&#39;, &#39;Language&#39;: &#39;Swedish&#39;, &#39;iso_alpha&#39;: &#39;SWE&#39;, &#39;keywords&#39;: &#39;Flyg Flygbolag Flyg Flygplats Plan&#39;}, &#39;tr-TR&#39;: {&#39;Country/Region&#39;: &#39;Turkey&#39;, &#39;Language&#39;: &#39;Turkish&#39;, &#39;iso_alpha&#39;: &#39;TUR&#39;, &#39;keywords&#39;: &#39;Havacılık Havayolu Uçak Havalimanı uçak&#39;}, &#39;zh-CN&#39;: {&#39;Country/Region&#39;: &quot;People&#39;s republic of China&quot;, &#39;Language&#39;: &#39;Chinese (simplified)&#39;, &#39;iso_alpha&#39;: &#39;CHN&#39;, &#39;keywords&#39;: &#39;航空 航空公司 机票 飞机场 平面&#39;}, &#39;zh-HK&#39;: {&#39;Country/Region&#39;: &#39;Hong Kong SAR&#39;, &#39;Language&#39;: &#39;Chinese (traditional)&#39;, &#39;iso_alpha&#39;: &#39;HKG&#39;, &#39;keywords&#39;: &#39;航空 航空公司 機票 飛機場 平面&#39;}, &#39;zh-TW&#39;: {&#39;Country/Region&#39;: &#39;Taiwan&#39;, &#39;Language&#39;: &#39;Chinese (traditional)&#39;, &#39;iso_alpha&#39;: &#39;TWN&#39;, &#39;keywords&#39;: &#39;航空 航空公司 機票 飛機場 平面&#39;}} . import pycountry def get_country_language_iso_alpha(market_code:str)-&gt;dict: &quot;&quot;&quot; &quot;&quot;&quot; language_iso_alpha_2,country_alpha_2 = market_code.split(&#39;-&#39;) return { &#39;country&#39;: pycountry.countries.get(alpha_2=country_alpha_2).name, &#39;language&#39;: pycountry.languages.get(alpha_2=language_iso_alpha_2).name, &#39;language_iso_alpha_2&#39;:language_iso_alpha_2, &#39;iso_alpha&#39;: pycountry.countries.get(alpha_2=country_alpha_2).alpha_3 } . !pip install pycountry google_trans_new . Collecting pycountry Downloading https://files.pythonhosted.org/packages/76/73/6f1a412f14f68c273feea29a6ea9b9f1e268177d32e0e69ad6790d306312/pycountry-20.7.3.tar.gz (10.1MB) |████████████████████████████████| 10.1MB 2.1MB/s Collecting google_trans_new Downloading https://files.pythonhosted.org/packages/f9/7b/9f136106dc5824dc98185c97991d3cd9b53e70a197154dd49f7b899128f6/google_trans_new-1.1.9-py3-none-any.whl Building wheels for collected packages: pycountry Building wheel for pycountry (setup.py) ... done Created wheel for pycountry: filename=pycountry-20.7.3-py2.py3-none-any.whl size=10746863 sha256=bfce3fcbaaee04549c259d91a5ff4713f638ef0e3c52b322f2a4b49c249d7cf1 Stored in directory: /root/.cache/pip/wheels/33/4e/a6/be297e6b83567e537bed9df4a93f8590ec01c1acfbcd405348 Successfully built pycountry Installing collected packages: pycountry, google-trans-new Successfully installed google-trans-new-1.1.9 pycountry-20.7.3 . market_keywords_df . Country/Region Language iso_alpha keywords . da-DK Denmark | Danish | DNK | Luftfart Flyselskab Fly Lufthavn Plane | . de-AT Austria | German | AUT | Luftfahrt Fluggesellschaft Flüge Flughafen Flu... | . de-CH Switzerland | German | CHE | Luftfahrt Fluggesellschaft Flüge Flughafen Flu... | . de-DE Germany | German | DEU | Luftfahrt Fluggesellschaft Flüge Flughafen Flu... | . en-AU Australia | English | AUS | Aviation Airline Flights Airport Plane | . en-CA Canada | English | CAN | Aviation Airline Flights Airport Plane | . en-GB United Kingdom | English | GBR | Aviation Airline Flights Airport Plane | . en-ID Indonesia | English | IDN | Aviation Airline Flights Airport Plane | . en-IE Ireland | English | IRL | Aviation Airline Flights Airport Plane | . en-IN India | English | IND | Aviation Airline Flights Airport Plane | . en-MY Malaysia | English | MYS | Aviation Airline Flights Airport Plane | . en-NZ New Zealand | English | NZL | Aviation Airline Flights Airport Plane | . en-PH Republic of the Philippines | English | PHL | Aviation Airline Flights Airport Plane | . en-SG Singapore | English | SGP | Aviation Airline Flights Airport Plane | . en-US United States | English | USA | Aviation Airline Flights Airport Plane | . en-ZA South Africa | English | ZAF | Aviation Airline Flights Airport Plane | . es-AR Argentina | Spanish | ARG | Aviación Aerolínea Vuelos Aeropuerto Avión | . es-CL Chile | Spanish | CHL | Aviación Aerolínea Vuelos Aeropuerto Avión | . es-ES Spain | Spanish | ESP | Aviación Aerolínea Vuelos Aeropuerto Avión | . es-MX Mexico | Spanish | MEX | Aviación Aerolínea Vuelos Aeropuerto Avión | . fi-FI Finland | Finnish | FIN | ilmailu lentoyhtiö lennot Lentokenttä kone | . fr-FR France | French | FRA | Aviation Compagnie aérienne Vols Aéroport Avion | . it-IT Italy | Italian | ITA | aviazione linea aerea voli Aeroporto Aereo | . ja-JP Japan | Japanese | JPN | 航空 エアライン フライト 空港 飛行機 | . ko-KR Korea | Korean | KOR | 비행 공기 호스 항공편 공항 비행기 | . nl-BE Belgium | Dutch | BEL | Luchtvaart vliegmaatschappij Vluchten Luchthav... | . nl-NL Netherlands | Dutch | NLD | Luchtvaart vliegmaatschappij Vluchten Luchthav... | . pl-PL Poland | Polish | POL | Lotnictwo Linia lotnicza Loty Lotnisko Samolot | . pt-BR Brazil | Portuguese | BRA | Aviação CIA aérea Voos Aeroporto Avião | . ru-RU Russia | Russian | RUS | авиации авиакомпания рейсы аэропорт Плане | . sv-SE Sweden | Swedish | SWE | Flyg Flygbolag Flyg Flygplats Plan | . tr-TR Turkey | Turkish | TUR | Havacılık Havayolu Uçak Havalimanı uçak | . zh-CN People&#39;s republic of China | Chinese (simplified) | CHN | 航空 航空公司 机票 飞机场 平面 | . zh-HK Hong Kong SAR | Chinese (traditional) | HKG | 航空 航空公司 機票 飛機場 平面 | . zh-TW Taiwan | Chinese (traditional) | TWN | 航空 航空公司 機票 飛機場 平面 | . market_keywords_dict = market_keywords_df[&#39;keywords&#39;].to_dict() market_keywords_dict . {&#39;da-DK&#39;: &#39;Luftfart Flyselskab Fly Lufthavn Plane&#39;, &#39;de-AT&#39;: &#39;Luftfahrt Fluggesellschaft Flüge Flughafen Flugzeug&#39;, &#39;de-CH&#39;: &#39;Luftfahrt Fluggesellschaft Flüge Flughafen Flugzeug&#39;, &#39;de-DE&#39;: &#39;Luftfahrt Fluggesellschaft Flüge Flughafen Flugzeug&#39;, &#39;en-AU&#39;: &#39;Aviation Airline Flights Airport Plane&#39;, &#39;en-CA&#39;: &#39;Aviation Airline Flights Airport Plane&#39;, &#39;en-GB&#39;: &#39;Aviation Airline Flights Airport Plane&#39;, &#39;en-ID&#39;: &#39;Aviation Airline Flights Airport Plane&#39;, &#39;en-IE&#39;: &#39;Aviation Airline Flights Airport Plane&#39;, &#39;en-IN&#39;: &#39;Aviation Airline Flights Airport Plane&#39;, &#39;en-MY&#39;: &#39;Aviation Airline Flights Airport Plane&#39;, &#39;en-NZ&#39;: &#39;Aviation Airline Flights Airport Plane&#39;, &#39;en-PH&#39;: &#39;Aviation Airline Flights Airport Plane&#39;, &#39;en-SG&#39;: &#39;Aviation Airline Flights Airport Plane&#39;, &#39;en-US&#39;: &#39;Aviation Airline Flights Airport Plane&#39;, &#39;en-ZA&#39;: &#39;Aviation Airline Flights Airport Plane&#39;, &#39;es-AR&#39;: &#39;Aviación Aerolínea Vuelos Aeropuerto Avión&#39;, &#39;es-CL&#39;: &#39;Aviación Aerolínea Vuelos Aeropuerto Avión&#39;, &#39;es-ES&#39;: &#39;Aviación Aerolínea Vuelos Aeropuerto Avión&#39;, &#39;es-MX&#39;: &#39;Aviación Aerolínea Vuelos Aeropuerto Avión&#39;, &#39;fi-FI&#39;: &#39;ilmailu lentoyhtiö lennot Lentokenttä kone&#39;, &#39;fr-FR&#39;: &#39;Aviation Compagnie aérienne Vols Aéroport Avion&#39;, &#39;it-IT&#39;: &#39;aviazione linea aerea voli Aeroporto Aereo&#39;, &#39;ja-JP&#39;: &#39;航空 エアライン フライト 空港 飛行機&#39;, &#39;ko-KR&#39;: &#39;비행 공기 호스 항공편 공항 비행기&#39;, &#39;nl-BE&#39;: &#39;Luchtvaart vliegmaatschappij Vluchten Luchthaven Vliegtuig&#39;, &#39;nl-NL&#39;: &#39;Luchtvaart vliegmaatschappij Vluchten Luchthaven Vliegtuig&#39;, &#39;pl-PL&#39;: &#39;Lotnictwo Linia lotnicza Loty Lotnisko Samolot&#39;, &#39;pt-BR&#39;: &#39;Aviação CIA aérea Voos Aeroporto Avião&#39;, &#39;ru-RU&#39;: &#39;авиации авиакомпания рейсы аэропорт Плане&#39;, &#39;sv-SE&#39;: &#39;Flyg Flygbolag Flyg Flygplats Plan&#39;, &#39;tr-TR&#39;: &#39;Havacılık Havayolu Uçak Havalimanı uçak&#39;, &#39;zh-CN&#39;: &#39;航空 航空公司 机票 飞机场 平面&#39;, &#39;zh-HK&#39;: &#39;航空 航空公司 機票 飛機場 平面&#39;, &#39;zh-TW&#39;: &#39;航空 航空公司 機票 飛機場 平面&#39;} . pip install backoff aiohttp asyncio . Collecting backoff Downloading https://files.pythonhosted.org/packages/f0/32/c5dd4f4b0746e9ec05ace2a5045c1fc375ae67ee94355344ad6c7005fd87/backoff-1.10.0-py2.py3-none-any.whl Collecting aiohttp Downloading https://files.pythonhosted.org/packages/88/c0/5890b4c8b04a79b7360e8fe4490feb0bb3ab179743f199f0e6220cebd568/aiohttp-3.7.4.post0-cp37-cp37m-manylinux2014_x86_64.whl (1.3MB) |████████████████████████████████| 1.3MB 13.7MB/s Collecting asyncio Downloading https://files.pythonhosted.org/packages/22/74/07679c5b9f98a7cb0fc147b1ef1cc1853bc07a4eb9cb5731e24732c5f773/asyncio-3.4.3-py3-none-any.whl (101kB) |████████████████████████████████| 102kB 11.9MB/s Requirement already satisfied: typing-extensions&gt;=3.6.5 in /usr/local/lib/python3.7/dist-packages (from aiohttp) (3.7.4.3) Requirement already satisfied: chardet&lt;5.0,&gt;=2.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp) (3.0.4) Collecting multidict&lt;7.0,&gt;=4.5 Downloading https://files.pythonhosted.org/packages/7c/a6/4123b8165acbe773d1a8dc8e3f0d1edea16d29f7de018eda769abb56bd30/multidict-5.1.0-cp37-cp37m-manylinux2014_x86_64.whl (142kB) |████████████████████████████████| 143kB 36.3MB/s Collecting async-timeout&lt;4.0,&gt;=3.0 Downloading https://files.pythonhosted.org/packages/e1/1e/5a4441be21b0726c4464f3f23c8b19628372f606755a9d2e46c187e65ec4/async_timeout-3.0.1-py3-none-any.whl Requirement already satisfied: attrs&gt;=17.3.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp) (21.2.0) Collecting yarl&lt;2.0,&gt;=1.0 Downloading https://files.pythonhosted.org/packages/f1/62/046834c5fc998c88ab2ef722f5d42122230a632212c8afa76418324f53ff/yarl-1.6.3-cp37-cp37m-manylinux2014_x86_64.whl (294kB) |████████████████████████████████| 296kB 38.7MB/s Requirement already satisfied: idna&gt;=2.0 in /usr/local/lib/python3.7/dist-packages (from yarl&lt;2.0,&gt;=1.0-&gt;aiohttp) (2.10) Installing collected packages: backoff, multidict, async-timeout, yarl, aiohttp, asyncio Successfully installed aiohttp-3.7.4.post0 async-timeout-3.0.1 asyncio-3.4.3 backoff-1.10.0 multidict-5.1.0 yarl-1.6.3 . market_keywords_dict . {&#39;da-DK&#39;: &#39;Luftfart Flyselskab Fly Lufthavn Plane&#39;, &#39;de-AT&#39;: &#39;Luftfahrt Fluggesellschaft Flüge Flughafen Flugzeug&#39;, &#39;de-CH&#39;: &#39;Luftfahrt Fluggesellschaft Flüge Flughafen Flugzeug&#39;, &#39;de-DE&#39;: &#39;Luftfahrt Fluggesellschaft Flüge Flughafen Flugzeug&#39;, &#39;en-AU&#39;: &#39;Aviation Airline Flights Airport Plane&#39;, &#39;en-CA&#39;: &#39;Aviation Airline Flights Airport Plane&#39;, &#39;en-GB&#39;: &#39;Aviation Airline Flights Airport Plane&#39;, &#39;en-ID&#39;: &#39;Aviation Airline Flights Airport Plane&#39;, &#39;en-IE&#39;: &#39;Aviation Airline Flights Airport Plane&#39;, &#39;en-IN&#39;: &#39;Aviation Airline Flights Airport Plane&#39;, &#39;en-MY&#39;: &#39;Aviation Airline Flights Airport Plane&#39;, &#39;en-NZ&#39;: &#39;Aviation Airline Flights Airport Plane&#39;, &#39;en-PH&#39;: &#39;Aviation Airline Flights Airport Plane&#39;, &#39;en-SG&#39;: &#39;Aviation Airline Flights Airport Plane&#39;, &#39;en-US&#39;: &#39;Aviation Airline Flights Airport Plane&#39;, &#39;en-ZA&#39;: &#39;Aviation Airline Flights Airport Plane&#39;, &#39;es-AR&#39;: &#39;Aviación Aerolínea Vuelos Aeropuerto Avión&#39;, &#39;es-CL&#39;: &#39;Aviación Aerolínea Vuelos Aeropuerto Avión&#39;, &#39;es-ES&#39;: &#39;Aviación Aerolínea Vuelos Aeropuerto Avión&#39;, &#39;es-MX&#39;: &#39;Aviación Aerolínea Vuelos Aeropuerto Avión&#39;, &#39;fi-FI&#39;: &#39;ilmailu lentoyhtiö lennot Lentokenttä kone&#39;, &#39;fr-FR&#39;: &#39;Aviation Compagnie aérienne Vols Aéroport Avion&#39;, &#39;it-IT&#39;: &#39;aviazione linea aerea voli Aeroporto Aereo&#39;, &#39;ja-JP&#39;: &#39;航空 エアライン フライト 空港 飛行機&#39;, &#39;ko-KR&#39;: &#39;비행 공기 호스 항공편 공항 비행기&#39;, &#39;nl-BE&#39;: &#39;Luchtvaart vliegmaatschappij Vluchten Luchthaven Vliegtuig&#39;, &#39;nl-NL&#39;: &#39;Luchtvaart vliegmaatschappij Vluchten Luchthaven Vliegtuig&#39;, &#39;pl-PL&#39;: &#39;Lotnictwo Linia lotnicza Loty Lotnisko Samolot&#39;, &#39;pt-BR&#39;: &#39;Aviação CIA aérea Voos Aeroporto Avião&#39;, &#39;ru-RU&#39;: &#39;авиации авиакомпания рейсы аэропорт Плане&#39;, &#39;sv-SE&#39;: &#39;Flyg Flygbolag Flyg Flygplats Plan&#39;, &#39;tr-TR&#39;: &#39;Havacılık Havayolu Uçak Havalimanı uçak&#39;, &#39;zh-CN&#39;: &#39;航空 航空公司 机票 飞机场 平面&#39;, &#39;zh-HK&#39;: &#39;航空 航空公司 機票 飛機場 平面&#39;, &#39;zh-TW&#39;: &#39;航空 航空公司 機票 飛機場 平面&#39;} . markets_df[&#39;Country/Region&#39;].unique() . array([&#39;Denmark&#39;, &#39;Austria&#39;, &#39;Belgium&#39;, &#39;Switzerland&#39;, &#39;Germany&#39;, &#39;Australia&#39;, &#39;Canada&#39;, &#39;United Kingdom&#39;, &#39;Indonesia&#39;, &#39;Ireland&#39;, &#39;India&#39;, &#39;Malaysia&#39;, &#39;New Zealand&#39;, &#39;Republic of the Philippines&#39;, &#39;Singapore&#39;, &#39;United States&#39;, &#39;English&#39;, &#39;South Africa&#39;, &#39;Argentina&#39;, &#39;Chile&#39;, &#39;Spain&#39;, &#39;Mexico&#39;, &#39;Spanish&#39;, &#39;Finland&#39;, &#39;France&#39;, &#39;Italy&#39;, &#39;Hong Kong SAR&#39;, &#39;Taiwan&#39;, &#39;Japan&#39;, &#39;Korea&#39;, &#39;Netherlands&#39;, &#34;People&#39;s republic of China&#34;, &#39;Poland&#39;, &#39;Brazil&#39;, &#39;Russia&#39;, &#39;Sweden&#39;, &#39;Turkey&#39;], dtype=object) . markets_df[&#39;Market Code&#39;].apply(lambda s:s.split(&#39;-&#39;)[1]).unique() . array([&#39;DK&#39;, &#39;AT&#39;, &#39;BE&#39;, &#39;CH&#39;, &#39;DE&#39;, &#39;AU&#39;, &#39;CA&#39;, &#39;GB&#39;, &#39;ID&#39;, &#39;IE&#39;, &#39;IN&#39;, &#39;MY&#39;, &#39;NZ&#39;, &#39;PH&#39;, &#39;SG&#39;, &#39;US&#39;, &#39;WW&#39;, &#39;XA&#39;, &#39;ZA&#39;, &#39;AR&#39;, &#39;CL&#39;, &#39;ES&#39;, &#39;MX&#39;, &#39;XL&#39;, &#39;FI&#39;, &#39;FR&#39;, &#39;IT&#39;, &#39;HK&#39;, &#39;TW&#39;, &#39;JP&#39;, &#39;KR&#39;, &#39;NL&#39;, &#39;CN&#39;, &#39;PL&#39;, &#39;BR&#39;, &#39;RU&#39;, &#39;SE&#39;, &#39;TR&#39;], dtype=object) . . !pip install unsync . Collecting unsync Downloading https://files.pythonhosted.org/packages/74/f8/80e4d6a6e9f36d7dc09e10522d98277c4576924f9f450100d57c8a80c269/unsync-1.3.2.tar.gz Building wheels for collected packages: unsync Building wheel for unsync (setup.py) ... done Created wheel for unsync: filename=unsync-1.3.2-cp37-none-any.whl size=4967 sha256=37cd8ff7214893ecf5d40b7506f02ce149595f8513079064ced64888db744bf6 Stored in directory: /root/.cache/pip/wheels/b2/31/43/4e734c578ffe46c8af109521ed8db656fcec4e6585bbdaf2a6 Successfully built unsync Installing collected packages: unsync Successfully installed unsync-1.3.2 . from unsync import unsync from google_trans_new import google_translator @unsync async def async_series_translator(sentence, input_language_iso_alpha_2): return google_translator().translate( sentence, lang_tgt=&#39;en&#39;, lang_src = input_language_iso_alpha_2 ) . %%timeit # def translate_news_df_to_english(news_df:pd.DataFrame)-&gt;pd.DataFrame: input_language_iso_alpha_2 = news_df[&#39;market&#39;].unique()[0] news_df[[&#39;name&#39;,&#39;description&#39;]].applymap(lambda sentence: (async_series_translator(sentence,input_language_iso_alpha_2)).result()) # return news_df # translate_news_df_to_english(news_df) . 1 loop, best of 5: 1.28 s per loop . input_language_iso_alpha_2 = news_df[&#39;market&#39;].unique()[0] news_df[[&#39;name&#39;,&#39;description&#39;]] = news_df[[&#39;name&#39;,&#39;description&#39;]].applymap(lambda sentence: google_translator().translate( sentence, lang_tgt=&#39;en&#39;, lang_src = &#39;nl&#39; )) . def create_news_df(response) . import backoff import logging import aiohttp import asyncio mkt = &#39;nl-NL&#39; keywords = &#39;Luchtvaart vliegmaatschappij Vluchten Luchthaven Vliegtuig&#39; logging.getLogger(&#39;backoff&#39;).addHandler(logging.StreamHandler()) search_url = &quot;https://api.cognitive.microsoft.com/bing/v7.0/news/search&quot; freshness = &#39;Week&#39; category = &#39;Business&#39; headers = {&quot;Ocp-Apim-Subscription-Key&quot;: os.getenv(&#39;BING_NEWS_API_KEY&#39;)} @unsync @backoff.on_exception(backoff.expo, aiohttp.ClientError, max_time=60) async def get_bing_news(market_code:str,keywords:str): params = { &quot;q&quot;: keywords, &#39;freshness&#39;: freshness, &#39;count&#39;: 10, &#39;mkt&#39;: mkt, # &#39;category&#39;:category, # &quot;textDecorations&quot;: True, &quot;textFormat&quot;: &quot;RAW&quot; } async with aiohttp.ClientSession() as session: async with session.get(search_url, headers=headers, params=params) as response: return await pd.DataFrame.from_dict(response.json()[&#39;value&#39;])[[&#39;name&#39;, &#39;url&#39;, &#39;datePublished&#39;]] get_bing_news(mkt,keywords).result() # def bing_aviation_news(market_keywords:dict): # search_url = &quot;https://api.cognitive.microsoft.com/bing/v7.0/news/search&quot; # freshness = &#39;Week&#39; # category = &#39;Business&#39; # headers = {&quot;Ocp-Apim-Subscription-Key&quot;: os.getenv(&#39;BING_NEWS_API_KEY&#39;)} # params = { # &quot;q&quot;: keywords, # &#39;freshness&#39;: freshness, # &#39;count&#39;: 10, # &#39;mkt&#39;: mkt, # # &#39;category&#39;:category, # # &quot;textDecorations&quot;: True, &quot;textFormat&quot;: &quot;RAW&quot; # } # translator = google_translator() # def bing_news_country(keywords, mkt,iso_alpha): # try: # resp = req.get(search_url, headers=headers, params=params) # resp.raise_for_status() # df = pd.DataFrame.from_dict(resp.json()[&#39;value&#39;])[[&#39;name&#39;, &#39;url&#39;, &#39;datePublished&#39;]] # if mkt.split(&#39;-&#39;)[0] != &#39;en&#39;: # try: # df[&#39;name&#39;] = [translator.translate(title, lang_tgt=&#39;en&#39;) for title in df[&#39;name&#39;]] # except Exception as e: # print(e) # except: # df = pd.DataFrame([[&#39;no_news_found&#39;, None, None]], columns=[&#39;name&#39;,&#39;url&#39;,&#39;datePublished&#39;]) # df[&#39;date&#39;] = today.date().strftime(dt_format) # df[&#39;iso_alpha&#39;] = iso_alpha # return df . TypeError Traceback (most recent call last) &lt;ipython-input-72-a3e56173edd1&gt; in &lt;module&gt;() 32 33 &gt; 34 get_bing_news(mkt,keywords).result() 35 36 # def bing_aviation_news(market_keywords:dict): /usr/local/lib/python3.7/dist-packages/unsync/unsync.py in result(self, *args, **kwargs) 142 raise asyncio.InvalidStateError(&#34;Calling result() in an unsync method is not allowed&#34;) 143 # Wait on the concurrent Future outside unsync.thread --&gt; 144 return self.concurrent_future.result(*args, **kwargs) 145 146 def done(self): /usr/lib/python3.7/concurrent/futures/_base.py in result(self, timeout) 433 raise CancelledError() 434 elif self._state == FINISHED: --&gt; 435 return self.__get_result() 436 else: 437 raise TimeoutError() /usr/lib/python3.7/concurrent/futures/_base.py in __get_result(self) 382 def __get_result(self): 383 if self._exception: --&gt; 384 raise self._exception 385 else: 386 return self._result /usr/local/lib/python3.7/dist-packages/backoff/_async.py in retry(*args, **kwargs) 131 132 try: --&gt; 133 ret = await target(*args, **kwargs) 134 except exception as e: 135 giveup_result = await giveup(e) &lt;ipython-input-72-a3e56173edd1&gt; in get_bing_news(market_code, keywords) 26 } 27 async with aiohttp.ClientSession() as session: &gt; 28 async with session.get(search_url, headers=headers, params=params) as response: 29 return await pd.DataFrame.from_dict(response.json()[&#39;value&#39;])[[&#39;name&#39;, &#39;url&#39;, &#39;datePublished&#39;]] 30 /usr/local/lib/python3.7/dist-packages/aiohttp/client.py in __aenter__(self) 1115 1116 async def __aenter__(self) -&gt; _RetType: -&gt; 1117 self._resp = await self._coro 1118 return self._resp 1119 /usr/local/lib/python3.7/dist-packages/aiohttp/client.py in _request(self, method, str_or_url, params, data, json, cookies, headers, skip_auto_headers, auth, allow_redirects, max_redirects, compress, chunked, expect100, raise_for_status, read_until_eof, proxy, proxy_auth, timeout, verify_ssl, fingerprint, ssl_context, ssl, proxy_headers, trace_request_ctx, read_bufsize) 540 try: 541 try: --&gt; 542 resp = await req.send(conn) 543 try: 544 await resp.start(conn) /usr/local/lib/python3.7/dist-packages/aiohttp/client_reqrep.py in send(self, conn) 666 self.method, path, self.version 667 ) --&gt; 668 await writer.write_headers(status_line, self.headers) 669 670 self._writer = self.loop.create_task(self.write_bytes(writer, conn)) /usr/local/lib/python3.7/dist-packages/aiohttp/http_writer.py in write_headers(self, status_line, headers) 116 &#34;&#34;&#34;Write request/response status and headers.&#34;&#34;&#34; 117 # status + headers --&gt; 118 buf = _serialize_headers(status_line, headers) 119 self._write(buf) 120 /usr/local/lib/python3.7/dist-packages/aiohttp/_http_writer.pyx in aiohttp._http_writer._serialize_headers() /usr/local/lib/python3.7/dist-packages/aiohttp/_http_writer.pyx in aiohttp._http_writer.to_str() TypeError: Cannot serialize non-str key None . import aiohttp import asyncio import time start_time = time.time() async def get_pokemon(session, url): async with session.get(url) as resp: pokemon = await resp.json() return pokemon[&#39;name&#39;] async def main(): async with aiohttp.ClientSession() as session: tasks = [] for number in range(1, 151): url = f&#39;https://pokeapi.co/api/v2/pokemon/{number}&#39; tasks.append(asyncio.ensure_future(get_pokemon(session, url))) original_pokemon = await asyncio.gather(*tasks) for pokemon in original_pokemon: print(pokemon) asyncio.run(main()) print(&quot; %s seconds &quot; % (time.time() - start_time)) . RuntimeError Traceback (most recent call last) &lt;ipython-input-86-3b7a977ec65f&gt; in &lt;module&gt;() 25 print(pokemon) 26 &gt; 27 asyncio.run(main()) 28 print(&#34; %s seconds &#34; % (time.time() - start_time)) /usr/lib/python3.7/asyncio/runners.py in run(main, debug) 32 if events._get_running_loop() is not None: 33 raise RuntimeError( &gt; 34 &#34;asyncio.run() cannot be called from a running event loop&#34;) 35 36 if not coroutines.iscoroutine(main): RuntimeError: asyncio.run() cannot be called from a running event loop . Why is this so much faster? . In the first version of this code, there was a single event loop which first did 35 queries one after the other, so the next request would only be sent of the previous one was finished. After that all the entries were translated, which are 10 35 2 = 700 calls one after the other. shuffling the order around would not have made this any faster. When using async, all 35 request were dispatched and serviced simultaneously, and for each request when the server responded, the 10 * 2 entries were immediately translated simultaneously as well. With the inclusion of the backoff package, connecting this to async requests and their logging system, by adding just 10 lines of code we made our code 10 times faster, more reliably and easier to maintain down the line. .",
            "url": "https://hugocool.github.io/blog/2021/05/30/Worldwide_news_fast_with_async.html",
            "relUrl": "/2021/05/30/Worldwide_news_fast_with_async.html",
            "date": " • May 30, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "How to keep up to date with all the covid data automatically",
            "content": "Keeping up with the ups and downs of a pandemic is not an easy task as a data scientist . This text explains the code below . import pandas as pd import pycountry covid_data_url = &#39;https://covid.ourworldindata.org/data/owid-covid-data.csv&#39; stringency_api_url = &#39;https://covidtrackerapi.bsg.ox.ac.uk/api/stringency&#39; def covid(): import pandas as pd df = pd.read_csv(covid_data_url) df[&#39;date&#39;] = pd.to_datetime(df[&#39;date&#39;]) df = df.drop(columns=[&#39;continent&#39;,&#39;stringency_index&#39;,&#39;location&#39;,&#39;tests_units&#39;]).pivot(index=&#39;date&#39;,columns=[&#39;iso_code&#39;]).sort_values(by=&#39;date&#39;).select_dtypes([&#39;number&#39;]).apply(pd.to_numeric, errors=&#39;coerce&#39;).drop_duplicates().dropna(axis=1,how=&#39;all&#39;).head(-1) #todo make all columns floats df.columns.names = [&#39;variable&#39;, &#39;iso_code&#39;] start_date = df.index.min() now_date = df.index.max() import datetime as dt import requests as req now_date = str(now_date.strftime(&#39;%Y-%m-%d&#39;)).replace(&quot;&#39;&quot;, &quot;&quot;) start_date = str(start_date.strftime(&#39;%Y-%m-%d&#39;)).replace(&quot;&#39;&quot;, &quot;&quot;) now_date1 = str(dt.datetime.now().strftime(&#39;%Y-%m-%d&#39;)).replace(&quot;&#39;&quot;, &quot;&quot;) stringency_api = f&quot;{stringency_api_url}/date-range/{start_date}/{now_date}&quot; stringency_df = pd.DataFrame.from_dict( req.get(stringency_api).json()[&#39;data&#39;], orient=&#39;index&#39;) def extract_stringency(stringency_series, start_date=&#39;2020-01-02&#39;, end_date = dt.datetime.now().strftime(&#39;%Y-%m-%d&#39;)): try: df = pd.DataFrame().from_dict( {i[&#39;date_value&#39;]: [i[&#39;stringency&#39;]] for i in stringency_series.values if not pd.isna(i)} , orient=&#39;index&#39;).rename(columns={0: stringency_series.name}) df = df.set_index(pd.DatetimeIndex(pd.to_datetime(df.index.values, format=&#39;%Y-%m-%d&#39;), name=&#39;day&#39;)).groupby( level=0).mean() # in case of double values per day, take their mean df = df.reindex(pd.date_range(start=start_date, end= end_date)) df.interpolate(method=&#39;linear&#39;, inplace=True) return df except: pass def stringency_data_df(stringency_df): data_df = pd.DataFrame([]) for iso_alpha in stringency_df.columns: data_df = pd.concat([ data_df, extract_stringency(stringency_df[iso_alpha], end_date=df.index.max().strftime(&#39;%Y-%m-%d&#39;)) ], axis=1) return data_df stringency = pd.concat([stringency_data_df(stringency_df)],keys = [&#39;stringency&#39;],names=[&#39;iso_code&#39;],axis=1) df = pd.concat([df,stringency],axis=1) return df . visualisation . from sklearn.preprocessing import QuantileTransformer def covid_map_df(covid_data): &quot;&quot;&quot; covid map contains: name of the country alpha_3 &quot;&quot;&quot; qt = QuantileTransformer(n_quantiles=150) pd.DataFrame(covid_data.loc[covid_data.index.max()]).columns#pivot(index = &#39;iso_code&#39;,columns=&#39;variable&#39;) covid_map = pd.DataFrame(covid_data.loc[covid_data.index.max()]).unstack(level=0)#.dropna() covid_map.columns = covid_map.columns.get_level_values(1).values for col in covid_map.filter(regex=&quot;_per&quot;).columns: new_col_name = str(col + &#39;_relative_change&#39;) covid_map[new_col_name] = qt.fit_transform(covid_map[col].values.reshape(-1, 1)) covid_map.index.name = &#39;alpha_3&#39; covid_map.reset_index(inplace=True) # not every iso_code has a full name via pycountry covid_map[&#39;name&#39;] = covid_map[&#39;alpha_3&#39;].apply(lambda cd: pycountry.countries.get(alpha_3=cd).name if pycountry.countries.get(alpha_3=cd) else cd) return covid_map . cols_dd = list(set(chloropleth_df.columns.tolist()) - {&#39;iso_code&#39;,&#39;location&#39;,&#39;tests performed&#39;,&#39;tests_units&#39;}) visible = np.array(cols_dd) df = chloropleth_df # define traces and buttons at once traces = [] buttons = [] for value in cols_dd: traces.append(go.Choropleth( locations=df[&#39;iso_code&#39;], # Spatial coordinates z=df[value].astype(float), # Data to be color-coded colorbar_title=value, visible= True if value==cols_dd[0] else False)) buttons.append(dict(label=value, method=&quot;update&quot;, args=[{&quot;visible&quot;:list(visible==value)}, {&quot;title&quot;:f&quot;&lt;b&gt;{value}&lt;/b&gt;&quot;}])) updatemenus = [{&quot;active&quot;:0, &quot;buttons&quot;:buttons, }] # Show figure fig = go.Figure(data=traces, layout=dict(updatemenus=updatemenus)) # This is in order to get the first title displayed correctly first_title = cols_dd[0] fig.update_layout(title=f&quot;&lt;b&gt;{first_title}&lt;/b&gt;&quot;,title_x=0.5) fig.show() . . . We want to store all this data in a central database, to simulate this for development we will run a local server. But in production switch the database url for prod url. . !pip install flask_sqlalchemy sqlalchemy-media psycopg2-binary --quiet # install !apt install postgresql postgresql-contrib &amp;&gt;log !service postgresql start !sudo -u postgres psql -c &quot;CREATE USER root WITH SUPERUSER&quot; # set connection %load_ext sql %config SqlMagic.feedback=False %config SqlMagic.autopandas=True %sql postgresql+psycopg2://@/postgres . |████████████████████████████████| 1.3MB 5.7MB/s |████████████████████████████████| 3.0MB 27.0MB/s Building wheel for sqlalchemy-media (setup.py) ... done * Starting PostgreSQL 10 database server ...done. CREATE ROLE . &#39;Connected: @postgres&#39; . In production switch this to the appropriate format for your database . from sqlalchemy import create_engine local_engine = create_engine(&#39;postgresql+psycopg2://@/postgres&#39;) . Then we need to store the data, however since the dataframe has . def to_sql(df, name, con, if_exists=&#39;fail&#39;,chunksize=3276): if not df.index.name: df.index.name = &#39;idx&#39; if not df.columns.name: df.columns.name = &#39;col&#39; df.rename_axis(index=str.lower).unstack().rename_axis(index=str.lower).reset_index().set_index( df.index.name.lower()).sort_values( by=[df.index.name.lower()] + [col.lower() for col in list(df.columns.names)]).to_sql(name, con=con, if_exists=if_exists, method=&#39;multi&#39;, chunksize=chunksize, index=True) . # read SQL def read_sql(name: str, con: sa.engine.base.Engine, column_filter=None, row_filter=None) -&gt; pd.DataFrame: &quot;&quot;&quot; :name: name of the the in the db :con: sqlalchemy connection engine :column_filter: dict in format {0:[&#39;value_0&#39;,&#39;value_1&#39;],1:[&#39;value&#39;]}, where 0 refers to the level of the multiindex column :row_filter: dict if format {&#39;from&#39;:&#39;2010-01-01&#39;,&#39;to&#39;:&#39;2011-01-01&#39;} or {&#39;last&#39;:&#39;10Q&#39;} &quot;&quot;&quot; if not con.has_table(name): # check whether the table exists raise Exception(f&quot;Table {name} does not exist&quot;) else: type_dict = sa.inspect(con).get_columns(name) index_col = [ col[&#39;name&#39;] for col in type_dict if any(datetype in col[&#39;type&#39;].__str__() for datetype in [&#39;TIMESTAMP&#39;,&#39;DATE&#39;]) ][0] stack_cols = [col[&#39;name&#39;] for col in type_dict if &#39;TEXT&#39; in col[&#39;type&#39;].__str__()] value_col = [col[&#39;name&#39;] for col in type_dict if (&#39;DOUBLE&#39; in col[&#39;type&#39;].__str__() or &#39;INT&#39; in col[&#39;type&#39;].__str__())][ 0] params = tuple() query = f&quot;SELECT * FROM {name}&quot; # base query if column_filter: # select which column to fetch from db query += f&quot; WHERE &quot; query += &quot; AND &quot;.join([f&quot;{stack_cols[int(key)]} IN ({&#39;,&#39;.join([&#39;%s&#39; for _ in value])})&quot; for key, value in column_filter.items()]) params = tuple([value for value in chain(*column_filter.values())]) if row_filter: # select between which dates to fetch if not column_filter: query += &#39; WHERE &#39; else: query += &#39; AND &#39; if &#39;from&#39; in row_filter.keys() and not &#39;last&#39; in row_filter.keys(): query += f&quot; {index_col} &gt;= %s&quot; params += tuple([dt.datetime.fromisoformat(row_filter[&#39;from&#39;])]) if &#39;to&#39; in row_filter.keys() and not &#39;last&#39; in row_filter.keys(): if &#39;from&#39; in row_filter.keys(): query += &#39; AND &#39; query += f&quot; {index_col} &lt;= %s&quot; params += tuple([dt.datetime.fromisoformat(row_filter[&#39;to&#39;])]) if &#39;last&#39; in row_filter.keys() and not (&#39;to&#39; in row_filter.keys() or &#39;from&#39; in row_filter.keys()): query += f&quot; {index_col} &gt;= %s&quot; max_date = con.engine.execute(f&#39;SELECT MAX({index_col}) FROM {name}&#39;).fetchone()[0] params += tuple([(max_date - pd.tseries.frequencies.to_offset(row_filter[&#39;last&#39;])).to_pydatetime()]) return pd.read_sql_query(query, con=con, index_col=index_col, params=params ).pivot(columns=stack_cols, values=value_col) . def get_last_source_date(table_name:str,con)-&gt;dt.datetime: import sqlalchemy as sa type_dict = sa.inspect(con).get_columns(table_name) index_col = [ col[&#39;name&#39;] for col in type_dict if any(datetype in col[&#39;type&#39;].__str__() for datetype in [&#39;TIMESTAMP&#39;,&#39;DATE&#39;]) ][0] last_source_date = con.engine.execute(f&#39;SELECT MAX({index_col}) FROM {table_name}&#39;).fetchone()[0] return last_source_date .",
            "url": "https://hugocool.github.io/blog/2021/05/30/How_to_store_large_timeseries_in_SQL.html",
            "relUrl": "/2021/05/30/How_to_store_large_timeseries_in_SQL.html",
            "date": " • May 30, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "FAIR data science in healthcare",
            "content": "Explaining the predictions . Data Science Ethics Checklist . A. Data Collection . . A.1 Informed consent: If there are human subjects, have they given informed consent, where subjects affirmatively opt-in and have a clear understanding of the data uses to which they consent? | A.2 Collection bias: Have we considered sources of bias that could be introduced during data collection and survey design and taken steps to mitigate those? | A.3 Limit PII exposure: Have we considered ways to minimize exposure of personally identifiable information (PII) for example through anonymization or not collecting information that isn&#39;t relevant for analysis? | A.4 Downstream bias mitigation: Have we considered ways to enable testing downstream results for biased outcomes (e.g., collecting data on protected group status like race or gender)? | . B. Data Storage . . B.1 Data security: Do we have a plan to protect and secure data (e.g., encryption at rest and in transit, access controls on internal users and third parties, access logs, and up-to-date software)? | B.2 Right to be forgotten: Do we have a mechanism through which an individual can request their personal information be removed? | B.3 Data retention plan: Is there a schedule or plan to delete the data after it is no longer needed? | . C. Analysis . . C.1 Missing perspectives: Have we sought to address blindspots in the analysis through engagement with relevant stakeholders (e.g., checking assumptions and discussing implications with affected communities and subject matter experts)? | C.2 Dataset bias: Have we examined the data for possible sources of bias and taken steps to mitigate or address these biases (e.g., stereotype perpetuation, confirmation bias, imbalanced classes, or omitted confounding variables)? | C.3 Honest representation: Are our visualizations, summary statistics, and reports designed to honestly represent the underlying data? | C.4 Privacy in analysis: Have we ensured that data with PII are not used or displayed unless necessary for the analysis? | C.5 Auditability: Is the process of generating the analysis well documented and reproducible if we discover issues in the future? | . D. Modeling . . D.1 Proxy discrimination: Have we ensured that the model does not rely on variables or proxies for variables that are unfairly discriminatory? | D.2 Fairness across groups: Have we tested model results for fairness with respect to different affected groups (e.g., tested for disparate error rates)? | D.3 Metric selection: Have we considered the effects of optimizing for our defined metrics and considered additional metrics? | D.4 Explainability: Can we explain in understandable terms a decision the model made in cases where a justification is needed? | D.5 Communicate bias: Have we communicated the shortcomings, limitations, and biases of the model to relevant stakeholders in ways that can be generally understood? | . E. Deployment . . E.1 Redress: Have we discussed with our organization a plan for response if users are harmed by the results (e.g., how does the data science team evaluate these cases and update analysis and models to prevent future harm)? | E.2 Roll back: Is there a way to turn off or roll back the model in production if necessary? | E.3 Concept drift: Do we test and monitor for concept drift to ensure the model remains fair over time? | E.4 Unintended use: Have we taken steps to identify and prevent unintended uses and abuse of the model and do we have a plan to monitor these once the model is deployed? | . Data Science Ethics Checklist generated with deon. . generating a checklist . !pip install deon --quiet !deon .",
            "url": "https://hugocool.github.io/blog/healthcare/explainable/2021/05/30/Explaining_the_prediction_of_diabetes.html",
            "relUrl": "/healthcare/explainable/2021/05/30/Explaining_the_prediction_of_diabetes.html",
            "date": " • May 30, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://hugocool.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://hugocool.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://hugocool.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://hugocool.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}